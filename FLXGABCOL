<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="Fluxo de decisão colegiada em gabinete">
    <description><![CDATA[TESTE teste..]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Nó de Desvio - Fluxo de decisão colegiada em gabinete">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('197:1338,7:1469')}"/>
    </swimlane>
    <swimlane name="Nó de Desvio - Fluxo processual 2 Grau">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('197:1338,7:1469')}"/>
    </swimlane>
    <swimlane name="Assessoria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('6:5197,7:1469')}"/>
    </swimlane>
    <swimlane name="Magistrado">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('7:5896,7:1469')}"/>
    </swimlane>
    <swimlane name="Secretaria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('197:1338')}" actor-id="#{actor.id}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Assessoria"/>
        <transition to="Desviar processo?" name="Desviar processo?"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:flx:colegiado:disponibilizado')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:colegiado:julgamento:id')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:colegiado:cargoVencedor:id')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:colegiado:orgaoVencedor:id')}"/>
        </event>
    </start-state>  
    <!-- NODES -->
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('tjmt:pje:fluxo:desvio:processo') ? 'Encaminhar para a tarefa parametrizada' : 'Minutar relatório de voto'}" name="Desviar processo?">
        <description><![CDATA[Este nó verifica se existe o parâmetro tjmt:pje:fluxo:desvio:processo setado valor true.

Este parametro é criado em três fluxos:
- Fluxo processual 2 Grau. >         Tarefa: Preparar relatório ou voto > Evento: ao entrar > Ação > set value false

- Preparar aot judicial de 2º Grau >  Tarefa: Minutar relatório, voto e ementa > Evento: ao sair do nó > Ação >  set value false.

- Desviar Processo de Fluxo > Tarefa: Escolher fluxo para desvio > Evento: sair do nó > Ação 1 > set value true.]]></description>
        <transition to="Minutar relatório de voto" name="Minutar relatório de voto"/>
        <transition to="Encaminhar para a tarefa parametrizada" name="Encaminhar para a tarefa parametrizada"/>
    </decision>
    <task-node end-tasks="true" name="Minutar relatório de voto">
        <task name="Minutar relatório de voto" swimlane="Assessoria">
            <controller>
                <variable name="WEB-INF_xhtml_flx_votacaoColegiado" mapped-name="frame:WEB-INF_xhtml_flx_votacaoColegiado" access="read,write"/>
            </controller>
        </task>
        <transition to="Confirmar relatório de voto" name="Encaminhar ao Magistrado"/>
        <transition to="Nó de Desvio - Fluxo processual 2 Grau" name="Nó de Desvio - Fluxo processual 2 Grau">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Registrar cancelamento de decisão colegiada" name="Cancelar elaboração de decisão colegiada"/>
        <transition to="Nó de Desvio - Fluxo de decisão colegiada em gabinete" name="Nó de Desvio - Fluxo de decisão colegiada em gabinete">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Aguardando a sessão" name="Aguardando a sessão">
            <condition expression="#{sessaoPautaProcessoTrfManager.getSessaoPautaProcessoTrfNaoJulgado(tramitacaoProcessualService.recuperaProcesso()).tipoInclusao == 'PA'}"/>
        </transition>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:votacaoColegiado:controlaLiberacao',false)}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:votacaoColegiado:controlaLiberacao')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="Alterar relatório">
        <task name="Alterar relatório" swimlane="Assessoria">
            <controller>
                <variable name="WEB-INF_xhtml_flx_votacaoColegiado" mapped-name="frame:WEB-INF_xhtml_flx_votacaoColegiado" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - Fluxo processual 2 Grau" name="Nó de Desvio - Fluxo processual 2 Grau">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Assinar inteiro teor" name="Assinar inteiro teor"/>
        <transition to="Nó de Desvio - Fluxo de decisão colegiada em gabinete" name="Nó de Desvio - Fluxo de decisão colegiada em gabinete">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:votacaoColegiado:ocultaEmenta',true)}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:votacaoColegiado:ocultaVoto',true)}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="Confirmar relatório de voto">
        <task name="Confirmar relatório de voto" swimlane="Magistrado">
            <controller>
                <variable name="WEB-INF_xhtml_flx_votacaoColegiado" mapped-name="frame:WEB-INF_xhtml_flx_votacaoColegiado" access="read,write"/>
            </controller>
        </task>
        <transition to="Minutar relatório de voto" name="Devolver à Assessoria"/>
        <transition to="Verificar Revisão" name="Confirmar"/>
        <transition to="Nó de Desvio - Fluxo processual 2 Grau" name="Nó de Desvio - Fluxo processual 2 Grau">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Nó de Desvio - Fluxo de decisão colegiada em gabinete" name="Nó de Desvio - Fluxo de decisão colegiada em gabinete">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:votacaoColegiado:controlaLiberacao',false)}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:votacaoColegiado:controlaLiberacao')}"/>
        </event>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaProcesso().exigeRevisor ? 'Finalizar Relatório com Revisão' : 'Finalizar Relatório sem Revisão'}" name="Verificar Revisão">
        <transition to="Finalizar Relatório com Revisão" name="Finalizar Relatório com Revisão"/>
        <transition to="Finalizar Relatório sem Revisão" name="Finalizar Relatório sem Revisão"/>
    </decision>
    <task-node end-tasks="true" name="Finalizar Relatório com Revisão">
        <task name="Finalizar Relatório com Revisão" swimlane="Assessoria"/>
        <transition to="Nó de Desvio - Fluxo processual 2 Grau" name="Nó de Desvio - Fluxo processual 2 Grau">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Análise do Cartório - Relatório" name="01 - Encaminhar para o Cartório"/>
        <transition to="Liberar Voto Revisor" name="02 - Encaminhar ao Revisor"/>
        <transition to="Nó de Desvio - Fluxo de decisão colegiada em gabinete" name="Nó de Desvio - Fluxo de decisão colegiada em gabinete">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Finalizar Relatório sem Revisão" name="03 - Finalizar Relatório sem Revisão"/>
    </task-node>
    <node name="Liberar Voto Revisor">
        <transition to="Vincular Relator - encaminhamento Revisão" name="Vincular Relator - encaminhamento Revisão"/>
        <event type="node-enter">
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavel('tjpr:pje:fluxo:colegiado:votoLiberadoRevisor', true)}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="Análise do Cartório - Relatório">
        <task name="Análise do Cartório - Relatório" swimlane="Secretaria">
            <controller/>
        </task>
        <transition to="Realizar Tarefa de Cartório" name="Realizar Tarefa de Cartório"/>
        <transition to="Nó de Desvio - Fluxo processual 2 Grau" name="Nó de Desvio - Fluxo processual 2 Grau">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Finalizar Relatório com Revisão" name="Retornar ao Relator"/>
        <transition to="Vincular Relator - encaminhamento Revisão" name="Encaminhar Relatório ao Revisor"/>
        <transition to="Nó de Desvio - Fluxo de decisão colegiada em gabinete" name="Nó de Desvio - Fluxo de decisão colegiada em gabinete">
            <condition expression="#{true}"/>
        </transition>
    </task-node>
    <process-state name="Realizar Tarefa de Cartório">
        <sub-process name="Cumprir decisão em 2º Grau" binding="late"/>
        <transition to="Análise do Cartório - Relatório" name="Análise do Cartório - Relatório"/>
    </process-state>
    <process-state name="Vincular Relator - encaminhamento Revisão">
        <sub-process name="Vinculação Regimental" binding="late"/>
        <transition to="Revisor setado de acordo com a configuração do colegiado" name="Revisor setado de acordo com a configuração do colegiado"/>
    </process-state>
    <process-state name="Encaminhar para Revisor">
        <sub-process name="Efetivação Remessa para outro Gabinete" binding="late"/>
        <transition to="Finalizar Encaminhamento" name="Finalizar Encaminhamento"/>
        <event type="node-enter">
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:Selecionado:OrgaoJulgador',tramitacaoProcessualService.recuperaProcesso().getOrgaoJulgadorRevisor().getIdOrgaoJulgador())}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:Selecionado:OrgaoColegiado',tramitacaoProcessualService.recuperaProcesso().getOrgaoJulgadorColegiado().getIdOrgaoJulgadorColegiado())}"/>
        </event>
        <event type="node-leave">
            <action expression="{tramitacaoProcessualService.recuperaProcesso().setProntoRevisao(true)}"/>
        </event>
    </process-state>
    <process-state name="Encaminhar Relatório para Revisor">
        <sub-process name="Efetivação Remessa para outro Gabinete" binding="late"/>
        <transition to="Ultimo movimento igual 269?" name="Ultimo movimento igual 269?"/>
        <event type="node-leave">
            <action name="upd" expression="{tramitacaoProcessualService.recuperaProcesso().setProntoRevisao(true)}"/>
        </event>
    </process-state>
    <task-node end-tasks="true" name="Finalizar Encaminhamento">
        <task name="Finalizar Encaminhamento" swimlane="Magistrado">
            <controller/>
        </task>
        <transition to="Análise do Cartório - Revisão" name="01 - Encaminhar para o Cartório"/>
        <transition to="Nó de Desvio - Fluxo processual 2 Grau" name="Nó de Desvio - Fluxo processual 2 Grau">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Registrar Revisão Realizada" name="02 - Aguardar Sessão"/>
        <transition to="Nó de Desvio - Fluxo de decisão colegiada em gabinete" name="Nó de Desvio - Fluxo de decisão colegiada em gabinete">
            <condition expression="#{true}"/>
        </transition>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoDestino', tramitacaoProcessualService.recuperaProcesso().getOrgaoJulgadorRevisor().idOrgaoJulgador)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:colegiadoDestino', (tramitacaoProcessualService.recuperaVariavel('orgaoJulgadorColegiado') == null ? tramitacaoProcessualService.recuperaProcesso().getOrgaoJulgadorRevisor().getOrgaoJulgadorColegiadoOrgaoJulgadorList().get(0).getOrgaoJulgadorColegiado().getIdOrgaoJulgadorColegiado() : tramitacaoProcessualService.recuperaVariavel('orgaoJulgadorColegiado')))}"/>
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso()}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoDestino', tramitacaoProcessualService.recuperaProcesso().orgaoJulgador.idOrgaoJulgador)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino', tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorCargo.idOrgaoJulgadorCargo)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:colegiadoDestino', tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorColegiado.idOrgaoJulgadorColegiado)}"/>
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso()}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:deslocamento:orgaoDestino')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('orgaoJulgadorColegiado')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:deslocamento:colegiadoDestino')}"/>
        </event>
    </task-node>
    <node name="Registrar Revisão Realizada">
        <transition to="Registrar aptidão para julgamento" name="Registrar aptidão para julgamento"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.recuperaProcesso().setRevisado(true)}"/>
        </event>
    </node>
    <process-state name="Análise do Cartório - Revisão">
        <sub-process name="Cumprir decisão em 2º Grau" binding="late"/>
        <transition to="Finalizar Encaminhamento" name="Finalizar Encaminhamento"/>
    </process-state>
    <task-node end-tasks="true" name="Finalizar Relatório sem Revisão">
        <task name="Finalizar Relatório sem Revisão" swimlane="Assessoria"/>
        <transition to="Registrar aptidão para julgamento" name="02 - Registrar aptidão para julgamento"/>
        <transition to="Nó de Desvio - Fluxo processual 2 Grau" name="Nó de Desvio - Fluxo processual 2 Grau">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Análise do Cartório - Relatório sem Revisão" name="01 - Encaminhar para o Cartório"/>
        <transition to="Nó de Desvio - Fluxo de decisão colegiada em gabinete" name="Nó de Desvio - Fluxo de decisão colegiada em gabinete">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Registrar cancelamento de decisão colegiada" name="03 - Devolver para elaborar decisão monocrática"/>
        <transition to="Finalizar Relatório com Revisão" name="04 - Finalizar Relatório com Revisão">
            <condition expression="#{tramitacaoProcessualService.recuperaProcesso().getExigeRevisor()}"/>
        </transition>
    </task-node>
    <process-state name="Análise do Cartório - Relatório sem Revisão">
        <sub-process name="Cumprir decisão em 2º Grau" binding="late"/>
        <transition to="Finalizar Relatório sem Revisão" name="Finalizar Relatório sem Revisão"/>
    </process-state>
    <node name="Registrar aptidão para julgamento">
        <transition to="Verificar Vinculação" name="Verificar Vinculação"/>
        <event type="node-enter">
            <action expression="#{processoJudicialManager.aptidaoParaJulgamento(processoTrfHome.instance.idProcessoTrf, true)}"/>
        </event>
        <event type="task-create">
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('Verificar Vinculação')}"/>
        </event>
    </node>
    <decision expression="#{tramitacaoProcessualService.recuperaProcesso().exigeRevisor ? 'Vincular Revisor' : 'Vincular Relator'}" name="Verificar Vinculação">
        <transition to="Vincular Relator" name="Vincular Relator"/>
        <transition to="Vincular Revisor" name="Vincular Revisor"/>
    </decision>
    <process-state name="Vincular Relator">
        <sub-process name="Vinculação Regimental" binding="late"/>
        <transition to="Aguardando a sessão" name="Aguardando a sessão"/>
    </process-state>
    <process-state name="Vincular Revisor">
        <sub-process name="Vinculação de Revisor" binding="late"/>
        <transition to="Aguardando a sessão" name="Aguardando a sessão"/>
    </process-state>
    <task-node end-tasks="true" name="Preparar voto e ementa">
        <task name="Preparar voto e ementa" swimlane="Assessoria">
            <controller>
                <variable name="WEB-INF_xhtml_flx_votacaoColegiado" mapped-name="frame:WEB-INF_xhtml_flx_votacaoColegiado" access="read,write"/>
            </controller>
        </task>
        <transition to="Aguardando a sessão" name="Aguardar a sessão sem liberar">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Retirar aptidão para julgamento" name="Retirar pedido de pauta">
            <condition expression="#{tramitacaoProcessualService.recuperaProcesso().selecionadoPauta or tramitacaoProcessualService.recuperaProcesso().selecionadoJulgamento}"/>
        </transition>
        <transition to="Testa processo disponibilizado" name="Liberar para votação antecipada">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Nó de Desvio - Fluxo processual 2 Grau" name="Nó de Desvio - Fluxo processual 2 Grau">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Registrar cancelamento de decisão colegiada" name="Devolver para elaborar decisão monocrática"/>
        <transition to="Registrar aptidão para julgamento" name="Solicitar inclusão para julgamento">
            <condition expression="#{not tramitacaoProcessualService.recuperaProcesso().selecionadoPauta and not tramitacaoProcessualService.recuperaProcesso().selecionadoJulgamento}"/>
        </transition>
        <transition to="Nó de Desvio - Fluxo de decisão colegiada em gabinete" name="Nó de Desvio - Fluxo de decisão colegiada em gabinete">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:votacaoColegiado:controlaLiberacao',false)}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:votacaoColegiado:controlaLiberacao')}"/>
        </event>
    </task-node>
    <node name="Retirar aptidão para julgamento">
        <transition to="Preparar voto e ementa" name="Preparar voto e ementa"/>
        <event type="node-enter">
            <action name="upd" expression="#{processoJudicialManager.aptidaoParaJulgamento(processoTrfHome.instance.idProcessoTrf, false)}"/>
        </event>
    </node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('pje:flx:colegiado:disponibilizado') ? 'Verificar voto relator alterado' : 'Disponibilizar para demais gabinetes'}" name="Testa processo disponibilizado">
        <transition to="Disponibilizar para demais gabinetes" name="Disponibilizar para demais gabinetes"/>
        <transition to="Verificar voto relator alterado" name="Verificar voto relator alterado"/>
        <event type="node-enter">
            <action expression="#{sessaoProcessoDocumentoManager.liberarDocumentosSessao(processoTrfHome.instance, processoTrfHome.instance.orgaoJulgador, null)}"/>
        </event>
    </decision>
    <task-node end-tasks="true" name="Aguardando a sessão">
        <task name="Aguardando a sessão" swimlane="Assessoria">
            <controller>
                <variable name="WEB-INF_xhtml_flx_votacaoVogal" mapped-name="frame:WEB-INF_xhtml_flx_votacaoVogal" access="read,write"/>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
            </controller>
        </task>
        <transition to="Testa existência de julgamento" name="Testa existência de julgamento">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Retirar aptidão para julgamento" name="01 - Pedir retirada de julgamento">
            <condition expression="#{!sessaoJulgamentoServiceCNJ.existeSessaoJulgamentoPendente(tramitacaoProcessualService.recuperaProcesso(), false) and !sessaoPautaProcessoTrfManager.isProcessoJulgado(tramitacaoProcessualService.recuperaProcesso())}"/>
        </transition>
        <transition to="Nó de Desvio - Fluxo processual 2 Grau" name="Nó de Desvio - Fluxo processual 2 Grau">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Preparar voto e ementa" name="Retomar preparação do voto">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Sinalizar manualmente o julgamento" name="02 - Encaminhar para preparação de acórdão">
            <condition expression="#{sessaoPautaProcessoTrfManager.isProcessoJulgado(processoJudicialManager.findById(processInstance.contextInstance.getVariable('processo')))}"/>
        </transition>
        <transition to="Renovar pedido de inclusão em pauta" name="Solicitar inclusão em pauta">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Nó de Desvio - Fluxo de decisão colegiada em gabinete" name="Nó de Desvio - Fluxo de decisão colegiada em gabinete">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Deslocar processo a pedido de vista" name="03 - Deslocar processo a pedido de vista">
            <condition expression="#{sessaoPautaProcessoTrfManager.getSessaoPautaProcessoTrfNaoJulgado(tramitacaoProcessualService.recuperaProcesso()).orgaoJulgadorPedidoVista.idOrgaoJulgador &gt; 0 ? true : false}"/>
        </transition>
        <transition to="Finalizar Relatório com Revisão" name="04 - Finalizar Relatório com Revisão">
            <condition expression="#{tramitacaoProcessualService.recuperaProcesso().getExigeRevisor()}"/>
        </transition>
        <transition to="Redistribuir processo - Relator substituto" name="05 - Redistribuir processo - Relator substituto"/>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:colegiado:aguardaSessao', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:colegiado:aguardaSessao:relator', true)}"/>
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('Testa existência de julgamento')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:colegiado:aguardaSessao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:colegiado:aguardaSessao:relator')}"/>
        </event>
    </task-node>
    <node name="Sinalizar manualmente o julgamento">
        <transition to="Teste se o relator é vencedor" name="Teste se o relator é vencedor"/>
        <event type="node-enter">
            <action expression="#{org.jboss.seam.core.events.raiseEvent('pje:colegiado:processo:julgado',sessaoPautaProcessoTrfManager.getSessaoPautaProcessoTrfJulgado(processoJudicialManager.findById(processInstance.contextInstance.getVariable('processo'))).idSessaoPautaProcessoTrf)}"/>
        </event>
    </node>
    <decision expression="#{'julgado' == processInstance.contextInstance.getVariable('pje:fluxo:colegiado:situacao') ? 'Teste se o relator é vencedor' : 'Analisar divergência manifestada'}" name="Testa existência de julgamento">
        <transition to="Analisar divergência manifestada" name="Analisar divergência manifestada"/>
        <transition to="Teste se o relator é vencedor" name="Teste se o relator é vencedor"/>
    </decision>
    <decision expression="#{not empty tramitacaoProcessualService.recuperaVariavel('pje:fluxo:colegiado:orgaoVencedor:id') and tramitacaoProcessualService.recuperaVariavel('pje:fluxo:colegiado:orgaoVencedor:id') == tramitacaoProcessualService.recuperaProcesso().orgaoJulgador.idOrgaoJulgador ? 'Assinar inteiro teor' : 'Deslocar o fluxo para o relator do acórdão'}" name="Teste se o relator é vencedor">
        <transition to="Assinar inteiro teor" name="Assinar inteiro teor"/>
        <transition to="Deslocar o fluxo para o relator do acórdão" name="Deslocar o fluxo para o relator do acórdão"/>
    </decision>
    <node name="Deslocar o fluxo para o relator do acórdão">
        <transition to="Assinar inteiro teor" name="Assinar inteiro teor"/>
        <event type="node-enter">
            <action expression="#{processInstance.contextInstance.setVariable('pje:fluxo:deslocamento:orgaoDestino', processInstance.contextInstance.getVariable('pje:fluxo:colegiado:orgaoVencedor:id'))}"/>
            <action expression="#{processInstance.contextInstance.setVariable('pje:fluxo:deslocamento:orgaoCargoDestino', processInstance.contextInstance.getVariable('pje:fluxo:colegiado:cargoVencedor:id'))}"/>
            <action/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(processInstance.contextInstance.getVariable('processo'))}"/>
        </event>
    </node>
    <node name="Disponibilizar para demais gabinetes">
        <transition to="Aguardando a sessão" name="Aguardando a sessão"/>
        <event type="node-enter">
            <action expression="#{sessaoJulgamentoServiceCNJ.criarFluxoDemaisJulgadores(tramitacaoProcessualService.recuperaProcesso(),'FLXCOLDEMAIS')}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:flx:colegiado:disponibilizado', true)}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="Assinar inteiro teor">
        <task name="Assinar inteiro teor" swimlane="Assessoria">
            <controller>
                <variable name="WEB-INF_xhtml_flx_elaborarAcordao" mapped-name="frame:WEB-INF_xhtml_flx_elaborarAcordao" access="read,write"/>
                <variable name="assinarInteiroTeorLote" mapped-name="assinarInteiroTeorLote:assinarInteiroTeorLote" access="read,write"/>
            </controller>
        </task>
        <transition to="Lançar movimentações do julgamento" name="Lançar movimentações do julgamento">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Nó de Desvio - Fluxo processual 2 Grau" name="Nó de Desvio - Fluxo processual 2 Grau">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Alterar relatório" name="Alterar relatório">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Nó de Desvio - Fluxo de decisão colegiada em gabinete" name="01 - Encaminhar para o nó de Desvio">
            <condition expression="#{tramitacaoProcessualService.recuperaProcesso() == parametroService.valueOf('tjmt:fluxo:tarefa:noDesvio') ? true : false}"/>
        </transition>
        <transition to="Encaminhar para a secretaria" name="02 - Encaminhar para a secretaria sem a assinatura do inteiro teor">
            <condition expression="#{tramitacaoProcessualService.recuperaProcesso() == '1000203-06.2016.8.11.0000' ? true : false}"/>
        </transition>
        <transition to="Alterar Magistrado vencedor" name="01 - Encaminhar para secretaria alterar o Magistrado vencedor"/>
        <transition to="Lançar movimentações do julgamento" name="03 - Lançar movimento de julgamento">
            <condition expression="#{sessaoProcessoDocumentoManager.existeAcordaoPendente(tramitacaoProcessualService.recuperaProcesso(), (sessaoPautaProcessoTrfManager.isProcessoJulgado(tramitacaoProcessualService.recuperaProcesso()) ? sessaoPautaProcessoTrfManager.getSessaoPautaProcessoTrfJulgado(tramitacaoProcessualService.recuperaProcesso()) : sessaoPautaProcessoTrfManager.getSessaoPautaProcessoTrfNaoJulgado(tramitacaoProcessualService.recuperaProcesso())))}"/>
        </transition>
        <event type="node-enter">
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:elaborarAcordao:ementa:permiteIncluir', true)}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:elaborarAcordao:acordao:permiteIncluir', true)}"/>
        </event>
        <event type="task-create">
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('Lançar movimentações do julgamento')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:elaborarAcordao:ementa:permiteIncluir', true)}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:elaborarAcordao:acordao:permiteIncluir', true)}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:elaborarAcordao:acordao:permiteAlterar', true)}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:elaborarAcordao:relatorio:permiteIncluir', true)}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:elaborarAcordao:relatorio:permiteAlterar', true)}"/>
        </event>
        <event type="task-end">
            <action name="upd" expression="#{processoJudicialManager.aptidaoParaJulgamento(processoTrfHome.instance.idProcessoTrf, false)}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="Lançar movimentações do julgamento">
        <task name="Lançar movimentações do julgamento" swimlane="Assessoria">
            <controller>
                <variable name="Processo_Fluxo_visualizarDecisao" mapped-name="frame:Processo_Fluxo_visualizarDecisao" access="read,write"/>
            </controller>
        </task>
        <transition to="Retornar fluxo para órgão distribuído" name="Devolver à secretaria"/>
        <transition to="Nó de Desvio - Fluxo processual 2 Grau" name="Nó de Desvio - Fluxo processual 2 Grau">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Nó de Desvio - Fluxo de decisão colegiada em gabinete" name="Nó de Desvio - Fluxo de decisão colegiada em gabinete">
            <condition expression="#{true}"/>
        </transition>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('minutaEmElaboracao')}"/>
        </event>
        <event type="task-start">
            <action name="Condicao do lancamento temporario de movimentos" expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', tramitacaoProcessualService.recuperaVariavel('pje:atoProferido'))}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavel('pje:relatorioVotoEmenta:saida', 'Cumprir decisão [BC2G]')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="Analisar divergência manifestada">
        <task name="Analisar divergência manifestada" swimlane="Assessoria">
            <controller>
                <variable name="WEB-INF_xhtml_flx_votacaoColegiado" mapped-name="frame:WEB-INF_xhtml_flx_votacaoColegiado" access="read,write"/>
            </controller>
        </task>
        <transition to="Confirmar alteração de voto" name="Para confirmação"/>
        <transition to="Aguardando a sessão" name="Manter a decisão como está"/>
        <transition to="Nó de Desvio - Fluxo processual 2 Grau" name="Nó de Desvio - Fluxo processual 2 Grau">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Nó de Desvio - Fluxo de decisão colegiada em gabinete" name="Nó de Desvio - Fluxo de decisão colegiada em gabinete">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:votacaoColegiado:controlaLiberacao', false)}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:votacaoColegiado:controlaLiberacao')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="Confirmar alteração de voto">
        <task name="Confirmar alteração de voto" swimlane="Magistrado">
            <controller>
                <variable name="WEB-INF_xhtml_flx_votacaoColegiado" mapped-name="frame:WEB-INF_xhtml_flx_votacaoColegiado" access="read,write"/>
            </controller>
        </task>
        <transition to="Aguardando a sessão" name="Aguardando a sessão"/>
        <transition to="Analisar divergência manifestada" name="Devolver à assessoria"/>
        <transition to="Nó de Desvio - Fluxo processual 2 Grau" name="Nó de Desvio - Fluxo processual 2 Grau">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Nó de Desvio - Fluxo de decisão colegiada em gabinete" name="Nó de Desvio - Fluxo de decisão colegiada em gabinete">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:votacaoColegiado:controlaLiberacao',false)}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:votacaoColegiado:controlaLiberacao')}"/>
        </event>
    </task-node>
    <node name="Retornar fluxo para órgão distribuído">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoDestino', tramitacaoProcessualService.recuperaProcesso().orgaoJulgador.idOrgaoJulgador)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino', tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorCargo.idOrgaoJulgadorCargo)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:colegiadoDestino', tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorColegiado.idOrgaoJulgadorColegiado)}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(processInstance.contextInstance.getVariable('processo'))}"/>
        </event>
    </node>
    <node name="Registrar cancelamento de decisão colegiada">
        <transition to="Enviar para Ato Monocrático" name="Enviar para Ato Monocrático"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('cnj:decisaocolegiada:cancelada', true)}"/>
            <action expression="#{processoJudicialManager.aptidaoParaJulgamento(processoTrfHome.instance.idProcessoTrf, false)}"/>
        </event>
        <event type="node-leave">
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:2gpajp:tipoMinuta','Minutar decisão monocrática')}"/>
        </event>
    </node>
    <process-state name="Enviar para Ato Monocrático">
        <sub-process name="Preparar ato judicial de 2º Grau" binding="late"/>
        <transition to="Término" name="Término"/>
        <event type="node-leave">
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavel('pje:relatorioVotoEmenta:saida','Cumprir decisão [BC2G]')}"/>
        </event>
    </process-state>
    <task-node end-tasks="true" name="Nó de Desvio - Fluxo processual 2 Grau">
        <task name="Nó de Desvio - Fluxo processual 2 Grau" swimlane="Nó de Desvio - Fluxo processual 2 Grau"/>
        <transition to="Confirmar relatório de voto" name="Confirmar relatório de voto"/>
        <transition to="Preparar voto e ementa" name="Preparar voto e ementa"/>
        <transition to="Aguardando a sessão" name="Aguardando a sessão"/>
        <transition to="Assinar inteiro teor" name="Assinar inteiro teor"/>
        <transition to="Lançar movimentações do julgamento" name="Lançar movimentações do julgamento"/>
        <transition to="Analisar divergência manifestada" name="Analisar divergência manifestada"/>
        <transition to="Confirmar alteração de voto" name="Confirmar alteração de voto"/>
        <transition to="Término" name="Término"/>
        <transition to="Finalizar Relatório com Revisão" name="Finalizar Relatório com Revisão"/>
        <transition to="Análise do Cartório - Relatório" name="Análise do Cartório - Relatório"/>
        <transition to="Finalizar Encaminhamento" name="Finalizar Encaminhamento"/>
        <transition to="Finalizar Relatório sem Revisão" name="Finalizar Relatório sem Revisão"/>
        <transition to="Alterar relatório" name="Alterar relatório"/>
        <transition to="Nó de Desvio - Fluxo de decisão colegiada em gabinete" name="Nó de Desvio - Fluxo de decisão colegiada em gabinete">
            <condition expression="#{true}"/>
        </transition>
    </task-node>
    <node name="Renovar pedido de inclusão em pauta">
        <transition to="Aguardando a sessão" name="Aguardando a sessão"/>
        <event type="node-enter">
            <action expression="#{processoJudicialManager.aptidaoParaJulgamento(processoTrfHome.instance.idProcessoTrf, true)}"/>
        </event>
    </node>
    <node name="Verificar voto relator alterado">
        <transition to="Aguardando a sessão" name="Aguardando a sessão"/>
        <event type="node-enter">
            <action expression="#{sessaoJulgamentoServiceCNJ.criarFluxoVotoDerrubado(tramitacaoProcessualService.recuperaProcesso(),'FLXVOTODERRUBADO')}"/>
        </event>
    </node>
    <end-state name="Término">
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:deslocamento:orgaoDestino')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:deslocamento:colegiadoDestino')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:flx:colegiado:disponibilizado')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:colegiado:julgamento:id')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:colegiado:cargoVencedor:id')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:colegiado:orgaoVencedor:id')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavel('tjmt:pje:fluxo:desvio:processo',false)}"/>
        </event>
    </end-state>
    <task-node end-tasks="true" name="Nó de Desvio - Fluxo de decisão colegiada em gabinete">
        <task name="Nó de Desvio - Fluxo de decisão colegiada em gabinete" swimlane="Nó de Desvio - Fluxo de decisão colegiada em gabinete"/>
        <transition to="Minutar relatório de voto" name="Minutar relatório de voto"/>
        <transition to="Alterar relatório" name="Alterar relatório"/>
        <transition to="Confirmar relatório de voto" name="Confirmar relatório de voto"/>
        <transition to="Finalizar Relatório com Revisão" name="Finalizar Relatório com Revisão"/>
        <transition to="Análise do Cartório - Relatório" name="Análise do Cartório - Relatório"/>
        <transition to="Finalizar Encaminhamento" name="Finalizar Encaminhamento"/>
        <transition to="Finalizar Relatório sem Revisão" name="Finalizar Relatório sem Revisão"/>
        <transition to="Preparar voto e ementa" name="Preparar voto e ementa"/>
        <transition to="Aguardando a sessão" name="Aguardando a sessão"/>
        <transition to="Assinar inteiro teor" name="Assinar inteiro teor"/>
        <transition to="Lançar movimentações do julgamento" name="Lançar movimentações do julgamento"/>
        <transition to="Analisar divergência manifestada" name="Analisar divergência manifestada"/>
        <transition to="Confirmar alteração de voto" name="Confirmar alteração de voto"/>
        <transition to="Nó de Desvio - Fluxo processual 2 Grau" name="Nó de Desvio - Fluxo processual 2 Grau"/>
        <transition to="Término" name="Término"/>
        <transition to="Alterar Magistrado vencedor" name="Alterar Magistrado vencedor"/>
        <transition to="[FLXGAB] - Selecionar novo revisor" name="[FLXGAB] - Selecionar novo revisor"/>
    </task-node>
    <node name="Deslocar o processo para o gabinete vencedor">
        <transition to="Assinar inteiro teor" name="Assinar inteiro teor"/>
        <event type="node-enter">
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino', tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorCargo.idOrgaoJulgadorCargo)}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoDestino', sessaoPautaProcessoTrfManager.getSessaoPautaProcessoTrfJulgado(tramitacaoProcessualService.recuperaProcesso()).getOrgaoJulgadorVencedor().idOrgaoJulgador)}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:colegiadoDestino', tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorColegiado.idOrgaoJulgadorColegiado)}"/>
        </event>
        <event type="node-leave">
            <action name="upd" expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(processInstance.contextInstance.getVariable('processo'))}"/>
        </event>
    </node>
    <decision expression="#{parametroService.valueOf('tjmt:pje:fluxo:desvio:processo:tarefa')}" name="Encaminhar para a tarefa parametrizada">
        <description><![CDATA[O nó de destino deve ser cadastrado na tabela de parâmetro no seguinte identificador: tjmt:pje:fluxo:desvio:processo:tarefa.

Como também este mesmo nó deve ser adicionado na transição de saída.]]></description>
        <transition to="Assinar inteiro teor" name="Assinar inteiro teor"/>
    </decision>
    <node name="Deslocar processo a pedido de vista">
        <transition to="Apreciar processo por não relator" name="Apreciar processo por não relator"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino', tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorCargo.idOrgaoJulgadorCargo)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoDestino', sessaoPautaProcessoTrfManager.getSessaoPautaProcessoTrfNaoJulgado(tramitacaoProcessualService.recuperaProcesso()).orgaoJulgadorPedidoVista.idOrgaoJulgador)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:colegiadoDestino', tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorColegiado.idOrgaoJulgadorColegiado)}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso()}"/>
        </event>
    </node>
    <process-state name="Apreciar processo por não relator">
        <sub-process name="Apreciação colegiada por não relatores" binding="late"/>
        <transition to="Retornar para sessão após apreciação de vista" name="Retornar para sessão após apreciação de vista"/>
    </process-state>
    <node name="Retornar para sessão após apreciação de vista">
        <transition to="Aguardando a sessão" name="Aguardando a sessão"/>
        <event type="node-enter">
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoDestino', processoTrfHome.instance.orgaoJulgador.idOrgaoJulgador)}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino', processoTrfHome.instance.orgaoJulgadorCargo.idOrgaoJulgadorCargo)}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:colegiadoDestino', processoTrfHome.instance.orgaoJulgadorColegiado.idOrgaoJulgadorColegiado)}"/>
        </event>
        <event type="node-leave">
            <action name="upd" expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso()}"/>
        </event>
    </node>
    <node name="Encaminhar para a secretaria">
        <transition to="Retornar fluxo para órgão distribuído" name="Retornar fluxo para órgão distribuído"/>
        <event type="node-leave">
            <action name="upd" expression="#{tramitacaoProcessualService.apagaVariavel('minutaEmElaboracao')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavel('pje:relatorioVotoEmenta:saida', 'Cumprir decisão [BC2G]')}"/>
            <action name="upd" expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', tramitacaoProcessualService.recuperaVariavel('pje:atoProferido'))}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="Alterar Magistrado vencedor">
        <task name="Alterar Magistrado vencedor" swimlane="Secretaria">
            <controller>
                <variable name="combo_colegiado" mapped-name="combo_objetos:combo_colegiado" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - Fluxo de decisão colegiada em gabinete" name="Nó de Desvio - Fluxo de decisão colegiada em gabinete">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Deslocar o processo para o gabinete vencedor" name="01 - Deslocar o processo para o gabinete vencedor"/>
        <event type="node-enter">
            <action name="upd" expression="#{taskInstanceUtil.setVariable('mostrarBotaoGravarNoFluxo','false')}"/>
        </event>
        <event type="node-leave">
            <action expression="#{sessaoJulgamentoService.getSessaoPautaProcessoTrfJulgado(tramitacaoProcessualService.recuperaProcesso()).setOrgaoJulgadorVencedor(tramitacaoProcessualService.recuperaVariavelTarefa('combo_objetos:combo_colegiado'))}"/>
            <action expression="#{sessaoPautaProcessoTrfManager.persist(sessaoJulgamentoService.getSessaoPautaProcessoTrfJulgado(tramitacaoProcessualService.recuperaProcesso()))}"/>
        </event>
    </task-node>
    <decision expression="#{processoJudicialService.recuperarUltimoMovimento(tramitacaoProcessualService.recuperaProcesso()).evento.getCodEvento() == &quot;269&quot; ? '[FLXGAB] - Selecionar novo revisor' : 'Finalizar Encaminhamento'}" name="Ultimo movimento igual 269?">
        <transition to="Finalizar Encaminhamento" name="Finalizar Encaminhamento"/>
        <transition to="[FLXGAB] - Selecionar novo revisor" name="[FLXGAB] - Selecionar novo revisor"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoDestino', tramitacaoProcessualService.recuperaProcesso().orgaoJulgador.idOrgaoJulgador)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino', tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorCargo.idOrgaoJulgadorCargo)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:colegiadoDestino', tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorColegiado.idOrgaoJulgadorColegiado)}"/>
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso()}"/>
            <action expression="#{preencherMovimento.deCodigo(123).comComplementoDeCodigo(18).doTipoDominio().preencherComElementoDeCodigo(40).comComplementoDeCodigo(7).doTipoLivre().preencherComTexto(tramitacaoProcessualService.recuperaProcesso().orgaoJulgador.orgaoJulgador).lancarMovimento()}"/>
        </event>
    </decision>
    <task-node end-tasks="true" name="[FLXGAB] - Selecionar novo revisor">
        <task name="[FLXGAB] - Selecionar novo revisor" swimlane="Secretaria">
            <controller>
                <variable name="Processo_Fluxo_visualizarDecisao" mapped-name="frame:Processo_Fluxo_visualizarDecisao" access="read,write"/>
                <variable name="aviso" mapped-name="textAlert:aviso" access="read,write"/>
                <variable name="list_orgao" mapped-name="combo_objetos:list_orgao" access="read,write,required"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - Fluxo de decisão colegiada em gabinete" name="Nó de Desvio - Fluxo de decisão colegiada em gabinete">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Revisor setado manualmente" name="Encaminhar"/>
    </task-node>
    <node name="Revisor setado de acordo com a configuração do colegiado">
        <transition to="Deslocar para orgao diverso" name="Deslocar para orgao diverso"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoDestino', orgaoJulgadorColegiadoOrgaoJulgadorHome.getOrgaoJulgadorColegiadoOrgaoJulgadorDAO().recuperarPorOrgaoJulgadorColegiadoEhOrgaoJulgador(tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorColegiado,tramitacaoProcessualService.recuperaProcesso().orgaoJulgador).getOrgaoJulgadorRevisor().orgaoJulgador.idOrgaoJulgador)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino', tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorCargo.idOrgaoJulgadorCargo)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:colegiadoDestino',  tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorColegiado.idOrgaoJulgadorColegiado)}"/>
        </event>
    </node>
    <node name="Deslocar para orgao diverso">
        <transition to="Encaminhar Relatório para Revisor" name="Encaminhar Relatório para Revisor"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso()}"/>
        </event>
        <event type="node-leave">
            <action expression="#{preencherMovimento.deCodigo(123).comComplementoDeCodigo(18).doTipoDominio().preencherComElementoDeCodigo('40').comComplementoDeCodigo(7).doTipoLivre().preencherComTexto(orgaoJulgadorManager.findById(processoInstanceManager.findById(processInstance.id).orgaoJulgador).orgaoJulgador).lancarMovimento()}"/>
        </event>
    </node>
    <node name="Revisor setado manualmente">
        <transition to="Deslocar para orgao diverso" name="Deslocar para orgao diverso"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoDestino', tramitacaoProcessualService.recuperaVariavel('list_orgao').idOrgaoJulgador)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino', tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorCargo.idOrgaoJulgadorCargo)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:colegiadoDestino', tramitacaoProcessualService.recuperaProcesso().getOrgaoJulgadorRevisor().getOrgaoJulgadorColegiadoOrgaoJulgadorList().get(0).getOrgaoJulgadorColegiado().getIdOrgaoJulgadorColegiado())}"/>
        </event>
    </node>
    <process-state name="Redistribuir processo - Relator substituto">
        <sub-process name="Fluxo de redistribuição" binding="late"/>
        <description><![CDATA[Sub-processo que permite a redistribuição do processo.
Na tarefa "aguardando sessão" pode existir a possibilidade de redistribuir o processo. Quando isso acontecer o processo passa por aqui e volta para "aguardando sessão".]]></description>
        <transition to="Aguardando a sessão" name="Aguardando a sessão"/>
    </process-state>  
    <!-- PROCESS-EVENTS -->
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>
